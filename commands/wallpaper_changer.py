import ctypes
import os
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram import types

FILES_BUTTONS = [
    [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]


def set_wallpaper(image_path: str) -> tuple[bool, str]:
    SPI_SETDESKWALLPAPER = 20
    # SPIF_UPDATEINIFILE | SPIF_SENDCHANGE
    SPIF_FLAGS = 1 | 2

    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
        abs_path = os.path.abspath(image_path)
        
        if not os.path.exists(abs_path):
            return False, f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {abs_path}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É —Å –æ–±–æ—è–º–∏
        wallpaper_dir = os.path.dirname(abs_path)
        current_wallpaper_path = os.path.join(os.path.dirname(__file__), "..", "wallpapers", "current_wallpaper.txt")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é Windows API
        if ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, abs_path, SPIF_FLAGS):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–æ–∏, —É–¥–∞–ª—è–µ–º –∏—Ö
            try:
                if os.path.exists(current_wallpaper_path):
                    with open(current_wallpaper_path, 'r') as f:
                        old_wallpaper = f.read().strip()
                        if os.path.exists(old_wallpaper) and old_wallpaper != abs_path:
                            os.remove(old_wallpaper)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –æ–±–æ–µ–≤

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤—ã–º –æ–±–æ—è–º
            try:
                os.makedirs(os.path.dirname(current_wallpaper_path), exist_ok=True)
                with open(current_wallpaper_path, 'w') as f:
                    f.write(abs_path)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏

            return True, "–û–±–æ–∏ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã."
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤."
        
    except Exception as e:
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

async def change_wallpaper(message: types.Message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ FILES_BUTTONS –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        user_data.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–æ–µ–≤.", reply_markup=ReplyKeyboardMarkup(keyboard=FILES_BUTTONS, resize_keyboard=True))
        return 'CANCELLED'


    if message.content_type == "text":
        image_path = message.text.strip()
        if not os.path.exists(image_path):
            await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}", reply_markup=FILES_BUTTONS)
            return
        ok, msg = set_wallpaper(image_path)
        await message.answer(msg, reply_markup=FILES_BUTTONS)
        return
    elif message.content_type == "photo":
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É wallpapers, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            wallpaper_dir = os.path.join(os.path.dirname(__file__), "..", "wallpapers")
            os.makedirs(wallpaper_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            photo_path = os.path.join(wallpaper_dir, f"wallpaper_{message.message_id}.jpg")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            await message.photo[-1].download(destination_file=photo_path)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏
            ok, msg = set_wallpaper(photo_path)
            await message.answer(msg, reply_markup=FILES_BUTTONS)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {str(e)}", reply_markup=FILES_BUTTONS)
        return
    else:
        await message.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=FILES_BUTTONS)
        return

async def wallpaper_request_message(message: types.Message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    await message.answer(
        "üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ], resize_keyboard=True)
    )



# –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é async –≤–Ω–µ set_wallpaper
from aiogram.types import ReplyKeyboardMarkup




