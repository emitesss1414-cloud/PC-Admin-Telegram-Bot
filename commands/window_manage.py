from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import pygetwindow as gw
import win32gui
import win32con

WINDOW_MANAGE_BUTTONS = [
    [KeyboardButton("–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω"), KeyboardButton("–°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ"), KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ")],
    [KeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–∫–Ω–æ"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
]

async def window_manage(message: types.Message, user_data: dict = None):
    # allow cancel/back at any time
    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        except Exception:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        if isinstance(user_data, dict):
            user_data.clear()
        return

    keyboard = ReplyKeyboardMarkup(keyboard=WINDOW_MANAGE_BUTTONS, resize_keyboard=True)
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –∏–ª–∏ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.",
        reply_markup=keyboard
    )

async def window_action(message: types.Message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    text = message.text.strip()
    keyboard = ReplyKeyboardMarkup(keyboard=WINDOW_MANAGE_BUTTONS, resize_keyboard=True)

    if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        user_data.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞–º–∏.")
        return

    if text == "–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω":
        try:
            windows = [w for w in gw.getAllTitles() if w.strip()]
            if windows:
                msg = "–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞:\n" + "\n".join(f"{i+1}. {w}" for i, w in enumerate(windows))
            else:
                msg = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω."
        except Exception as e:
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω: {e}"
            print(f"Error getting window list: {e}")
        await message.answer(msg, reply_markup=keyboard)

    elif text == "–°–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ":
        try:
            win = gw.getActiveWindow()
            if win:
                win.minimize()
                await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ.", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.", reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=keyboard)
            print(f"Error minimizing window: {e}")

    elif text == "–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ":
        try:
            win = gw.getActiveWindow()
            if win:
                win.close()
                await message.answer("–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.", reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=keyboard)
            print(f"Error closing window: {e}")

    elif text == "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ–∫–Ω–æ":
        try:
            windows = [w for w in gw.getAllTitles() if w.strip()]
            if not windows:
                await message.answer("–ù–µ—Ç –æ–∫–æ–Ω –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.", reply_markup=keyboard)
                return
            user_data['window_switch_list'] = windows
            user_data['window_switch'] = True
            msg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n" + "\n".join(f"{i+1}. {w}" for i, w in enumerate(windows))
            await message.answer(msg, reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_markup=keyboard)
            print(f"Error preparing to switch window: {e}")

    elif user_data.get('window_switch') and text.isdigit():
        windows = user_data.get('window_switch_list', [])
        try:
            idx = int(text) - 1
            if 0 <= idx < len(windows):
                win = gw.getWindowsWithTitle(windows[idx])[0]
                hwnd = win._hWnd
                win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
                win32gui.SetForegroundWindow(hwnd)
                win32gui.BringWindowToTop(hwnd)
                await message.answer(f"–û–∫–Ω–æ '{windows[idx]}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ–¥–Ω—è—Ç–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö.", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–∫–Ω–∞.", reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–∫–Ω–∞: {e}", reply_markup=keyboard)
            print(f"Error switching window: {e}")
        # Reset the switch mode after an attempt
        user_data['window_switch'] = False
        user_data.pop('window_switch_list', None)
    
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞–º–∏.", reply_markup=keyboard)
