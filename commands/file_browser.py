import os
import string
from aiogram.types import ReplyKeyboardMarkup

def get_available_drives() -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ (C:, D: –∏ —Ç.–¥.)."""
    drives = []
    for letter in string.ascii_uppercase:
        drive = f"{letter}:\\"
        if os.path.exists(drive):
            drives.append(drive)
    return drives

def get_directory_contents(path: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {'dirs': [...], 'files': [...]}.
    """
    dirs = []
    files = []
    try:
        with os.scandir(path) as it:
            for entry in it:
                if entry.is_dir():
                    dirs.append(entry.name)
                else:
                    files.append(entry.name)
        return {"dirs": sorted(dirs), "files": sorted(files)}
    except (PermissionError, FileNotFoundError):
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω


async def file_browser_handler(message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
            )
        except Exception:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return

    drives = get_available_drives()
    if not drives:
        await message.answer("–î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏: " + ", ".join(drives))

