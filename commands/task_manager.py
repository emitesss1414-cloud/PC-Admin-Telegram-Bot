import psutil
from aiogram.types import ReplyKeyboardMarkup

async def task_manager_handler(message, user_data=None):
    """Handler for task manager interactions with cancel/back support.
    Commands supported in message.text:
      - list
      - kill <pid>
    """
    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        except Exception:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return 'CANCELLED'

    text = message.text.strip()
    if text.lower() == 'list':
        procs = get_process_list()
        msg = '\n'.join(f"{p['pid']} {p['name']} {p['memory_mb']:.1f}MB" for p in procs[:30])
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer(msg or 'No processes found', reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        except Exception:
            await message.answer(msg or 'No processes found')
        return

    if text.lower().startswith('kill'):
        parts = text.split()
        if len(parts) < 2 or not parts[1].isdigit():
            try:
                from bot import MAIN_COMMAND_BUTTONS
                await message.answer('Usage: kill <pid>', reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
            except Exception:
                await message.answer('Usage: kill <pid>')
            return
        pid = int(parts[1])
        res = kill_process_by_pid(pid)
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer(res, reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        except Exception:
            await message.answer(res)
        return

    try:
        from bot import MAIN_COMMAND_BUTTONS
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'list' –∏–ª–∏ 'kill <pid>'.", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
    except Exception:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'list' –∏–ª–∏ 'kill <pid>'.")

def get_process_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'memory_info']):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            pinfo = proc.info
            # –°—á–∏—Ç–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë
            pinfo['memory_mb'] = pinfo['memory_info'].rss / (1024 * 1024)
            processes.append(pinfo)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_processes = sorted(processes, key=lambda p: p['memory_mb'], reverse=True)
    return sorted_processes

def kill_process_by_pid(pid):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –µ–≥–æ PID."""
    try:
        p = psutil.Process(pid)
        p.kill()
        return f"–ü—Ä–æ—Ü–µ—Å—Å {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω."
    except psutil.NoSuchProcess:
        return f"–û—à–∏–±–∫–∞: –ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except psutil.AccessDenied:
        return f"–û—à–∏–±–∫–∞: –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
