import os
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

FILES_BUTTONS = [
    [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]

ACTION_KEYBOARD = [
    [KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å"), KeyboardButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
]

def get_desktop_path():
    return os.path.join(os.path.expanduser("~"), "Desktop")

async def files_on_desktop(message: types.Message, user_data: dict = None):
    # preserve caller dict when an empty dict is passed (empty dict is falsy),
    # so only replace when user_data is truly None
    if user_data is None:
        user_data = {}
    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        try:
            from bot import MAIN_COMMAND_BUTTONS
            await message.answer(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
            )
        except Exception:
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return

    desktop = get_desktop_path()
    try:
        files = [f for f in os.listdir(desktop) if os.path.isfile(os.path.join(desktop, f))]
    except FileNotFoundError:
        await message.answer("–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = ReplyKeyboardMarkup(keyboard=FILES_BUTTONS, resize_keyboard=True)
    if not files:
        await message.answer("–ù–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.", reply_markup=keyboard)
        return

    user_data['desktop_files_list'] = files
    user_data['desktop_files_mode'] = True

    msg = "–§–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n" + "\n".join(f"{i+1}. {f}" for i, f in enumerate(files))
    msg += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è."
    await message.answer(msg, reply_markup=keyboard)

async def files_on_desktop_action(message: types.Message, user_data: dict = None):
    # preserve caller dict when an empty dict is passed
    if user_data is None:
        user_data = {}
    text = message.text.strip()
    keyboard = ReplyKeyboardMarkup(keyboard=FILES_BUTTONS, resize_keyboard=True)
    action_keyboard = ReplyKeyboardMarkup(keyboard=ACTION_KEYBOARD, resize_keyboard=True)
    desktop = get_desktop_path()

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_data.clear()
        from bot import MAIN_COMMAND_BUTTONS
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
        )
        return
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        user_data.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.", reply_markup=keyboard)
        return

    # State: waiting for new name
    if user_data.get('await_new_name'):
        selected_file = user_data.get('selected_file_path')
        if not selected_file or not os.path.exists(selected_file):
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=keyboard)
            user_data.clear()
            return

        new_name = text
        new_path = os.path.join(desktop, new_name)

        if any(c in new_name for c in '\/:*?"<>|'):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard)
            return

        if os.path.exists(new_path):
            await message.answer("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=keyboard)
            return

        try:
            os.rename(selected_file, new_path)
            await message.answer("–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!", reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}", reply_markup=keyboard)
        
        user_data.pop('await_new_name', None)
        user_data.pop('selected_file_path', None)
        await files_on_desktop(message, user_data) # Show the list again
        return

    # State: file selected, waiting for action
    if user_data.get('selected_file_path'):
        selected_file = user_data.get('selected_file_path')
        if not os.path.exists(selected_file):
            await message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.", reply_markup=keyboard)
            user_data.clear()
            return
            
        if text == "–û—Ç–∫—Ä—ã—Ç—å":
            try:
                os.startfile(selected_file)
                await message.answer("–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç!", reply_markup=action_keyboard)
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}", reply_markup=action_keyboard)
        elif text == "–£–¥–∞–ª–∏—Ç—å":
            try:
                os.remove(selected_file)
                await message.answer("–§–∞–π–ª —É–¥–∞–ª—ë–Ω!", reply_markup=keyboard)
                user_data.clear()
                await files_on_desktop(message, user_data) # Refresh list
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", reply_markup=action_keyboard)
        elif text == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å":
            user_data['await_new_name'] = True
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:", reply_markup=keyboard)
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.", reply_markup=action_keyboard)
        return

    # State: initial, waiting for file number
    if text.isdigit():
        files = user_data.get('desktop_files_list', [])
        try:
            idx = int(text) - 1
            if 0 <= idx < len(files):
                file_name = files[idx]
                file_path = os.path.join(desktop, file_name)
                if os.path.exists(file_path):
                    user_data['selected_file_path'] = file_path
                    await message.answer(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=action_keyboard)
                else:
                    await message.answer("–§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫.", reply_markup=keyboard)
                    user_data.clear()
            else:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.", reply_markup=keyboard)
        except (ValueError, IndexError):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.", reply_markup=keyboard)
        return

    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=keyboard)