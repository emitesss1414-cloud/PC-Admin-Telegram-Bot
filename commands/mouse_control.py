import asyncio
import pyautogui
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton



MOUSE_BUTTONS = [
    [KeyboardButton("‚¨ÜÔ∏è")],
    [KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton("–õ–ö–ú"), KeyboardButton("–ü–ö–ú"), KeyboardButton("‚û°Ô∏è")],
    [KeyboardButton("‚¨áÔ∏è")],
    [KeyboardButton("–ö–æ–ª–µ—Å–æ ‚Üë"), KeyboardButton("–ö–æ–ª–µ—Å–æ ‚Üì")],
    [KeyboardButton("–°—Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏–µ"), KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
]

FILES_BUTTONS = [
    [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
]

async def move_mouse_loop(user_data: dict):
    direction = user_data.get('mouse_direction')
    if not direction:
        return

    while user_data.get('mouse_moving'):
        if direction == "‚¨ÜÔ∏è":
            pyautogui.moveRel(0, -20)
        elif direction == "‚¨áÔ∏è":
            pyautogui.moveRel(0, 20)
        elif direction == "‚¨ÖÔ∏è":
            pyautogui.moveRel(-20, 0)
        elif direction == "‚û°Ô∏è":
            pyautogui.moveRel(20, 0)
        await asyncio.sleep(0.05)

async def mouse_control(message: types.Message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    user_data['mouse_control_mode'] = True
    keyboard = ReplyKeyboardMarkup(keyboard=MOUSE_BUTTONS, resize_keyboard=True)
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é:\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –∫–ª–∏–∫–æ–≤.",
        reply_markup=keyboard
    )

async def mouse_action(message: types.Message, user_data: dict = None):
    if user_data is None:
        user_data = {}
    action = message.text
    keyboard = ReplyKeyboardMarkup(keyboard=MOUSE_BUTTONS, resize_keyboard=True)

    if message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel"]:
        user_data.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é.", reply_markup=FILES_BUTTONS)
        return 'CANCELLED'

    if action in ["‚¨ÜÔ∏è", "‚¨áÔ∏è", "‚¨ÖÔ∏è", "‚û°Ô∏è"]:
        if user_data.get('mouse_moving'):
            user_data['mouse_moving'] = False
            await asyncio.sleep(0.1) # give time for the loop to stop

        user_data['mouse_moving'] = True
        user_data['mouse_direction'] = action
        asyncio.create_task(move_mouse_loop(user_data))
        await message.answer(f"–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ '{action}' –Ω–∞—á–∞—Ç–æ. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏–µ'.", reply_markup=keyboard)
    
    elif action == "–°—Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏–µ":
        if user_data.get('mouse_moving'):
            user_data['mouse_moving'] = False
            await message.answer("–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
        else:
            await message.answer("–ú—ã—à—å –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è.", reply_markup=keyboard)

    elif action == "–õ–ö–ú":
        pyautogui.click(button='left')
        await message.answer("–õ–ö–ú –∫–ª–∏–∫.", reply_markup=keyboard)
    elif action == "–ü–ö–ú":
        pyautogui.click(button='right')
        await message.answer("–ü–ö–ú –∫–ª–∏–∫.", reply_markup=keyboard)
    elif action == "–ö–æ–ª–µ—Å–æ ‚Üë":
        pyautogui.scroll(100)
        await message.answer("–ö–æ–ª–µ—Å–æ –≤–≤–µ—Ä—Ö.", reply_markup=keyboard)
    elif action == "–ö–æ–ª–µ—Å–æ ‚Üì":
        pyautogui.scroll(-100)
        await message.answer("–ö–æ–ª–µ—Å–æ –≤–Ω–∏–∑.", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=keyboard)