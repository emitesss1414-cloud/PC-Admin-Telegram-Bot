import asyncio
import math
import os
import time

import bcrypt
import inspect
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils import executor
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
from commands.create_file import create_file, create_file_name
from commands.create_folder import create_folder, create_folder_name
from commands.files_on_desktop import files_on_desktop, files_on_desktop_action
from commands.get_mac import get_mac
from commands.installed_apps import get_installed_apps
from commands.ip_info import get_private_ip, get_public_ip
from commands.lock_pc import lock_pc
from commands.mouse_control import mouse_control, mouse_action
from commands.open_folder import open_folder, open_folder_path
from commands.open_program import open_program, open_program_name
from commands.open_site import open_site, open_site_link
from commands.performance_graphs import generate_performance_graphs
from commands.play_music import play_music
# removed power management functions (modes removed)
from commands.quick_access import FOLDER_PATHS, quick_access_initial, handle_quick_access_choice
from commands.reboot import reboot
from commands.screenshot import screenshot
from commands.set_brightness import set_brightness, set_brightness_value
from commands.set_volume import set_volume, set_volume_value
from commands.show_message import show_message, show_message_text
from commands.shutdown import shutdown
from commands.system_info import system_info
from commands.system_info_full import system_info_full

from commands.theme_changer import set_theme, theme_changer_handler
from commands.wallpaper_changer import set_wallpaper
from commands.window_manage import window_manage, window_action
from commands.youtube import youtube, youtube_control, youtube_link
from commands.task_manager import kill_process_by_pid, get_process_list, task_manager_handler
from commands.file_browser import get_available_drives, get_directory_contents
from utils.fb_tokens import add_token, resolve_token, cleanup, clear_user, FB_TOKEN_TTL
FB_TOKEN_TTL = 300  # seconds


async def call_handler(handler, message, user_data):
    """Call handler which may accept (message) or (message, user_data).
    Uses signature inspection to decide how to call coroutine or regular function.
    """
    wants_userdata = False
    try:
        sig = inspect.signature(handler)
        params = [p for p in sig.parameters.values() if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD)]
        # Only pass user_data when the handler explicitly declares the second parameter named 'user_data'.
        if len(params) >= 2 and params[1].name == 'user_data':
            wants_userdata = True
    except Exception:
        # fallback: assume it accepts only message
        wants_userdata = False

    res = None
    if asyncio.iscoroutinefunction(handler):
        if wants_userdata:
            res = await handler(message, user_data)
        else:
            res = await handler(message)
    else:
        if wants_userdata:
            res = handler(message, user_data)
        else:
            res = handler(message)

    # If handler returned a dict, assume it's a new user_data snapshot and merge it
    try:
        if isinstance(res, dict) and isinstance(user_data, dict):
            # replace contents of the per-user dict to preserve identity
            user_data.clear()
            user_data.update(res)
    except Exception:
        pass

    return res


# token map helpers are provided by utils.fb_tokens

load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))
MAC_ADDRESS = os.getenv("WOL_MAC_ADDRESS")
# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö—ç—à–µ–π –∏–∑ .env, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π, –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –≤ bytes
BOT_PASSWORD_HASHES = [h.strip().encode("utf-8") for h in os.getenv("BOT_PASSWORD_HASHES", "").split(",") if h.strip()]

MAX_LOGIN_ATTEMPTS = 3
LOCKOUT_DURATION = 600
PROCESS_LIST_PAGE_SIZE = 10
APPS_PAGE_SIZE = 15

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
MAIN_COMMAND_BUTTONS = [
    [KeyboardButton("‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö"), KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö")],
    [KeyboardButton("üìÇ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É"), KeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª")],
    [KeyboardButton("üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"), KeyboardButton("‚ñ∂Ô∏è YouTube –≤–∏–¥–µ–æ")],
    [KeyboardButton("üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"), KeyboardButton("üìã –§–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ")],
    [KeyboardButton("üîä –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"), KeyboardButton("üåû –ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å")],
    [KeyboardButton("‚≠ê –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø"), KeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ")],
    [KeyboardButton("üîí –í—ã–π—Ç–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
]

EXTRA_COMMAND_BUTTONS = [
    [KeyboardButton("üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("üóî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏")],
    [KeyboardButton("‚öôÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á"), KeyboardButton("üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏")],
    [KeyboardButton("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")],
    [KeyboardButton("üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"), KeyboardButton("üåê IP –ê–¥—Ä–µ—Å–∞")],
    [KeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"), KeyboardButton("üóÇÔ∏è –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")],
    [KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç"), KeyboardButton("üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")],
    [KeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω"), KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")],
    [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ü–ö"), KeyboardButton("üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é")],

    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
]



# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_data = {}
auth_state = {}


def get_user_data_for(user_id: int) -> dict:
    """Return per-user data dict stored in global user_data mapping."""
    if user_id not in user_data:
        user_data[user_id] = {}
    return user_data[user_id]


def get_user_auth_state(user_id):
    if user_id not in auth_state:
        auth_state[user_id] = {
            "authenticated": False,
            "failed_attempts": 0,
            "lockout_until": 0,
        }
    return auth_state[user_id]


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π ---

async def show_file_browser(message: types.Message, path: str = None):
    keyboard = InlineKeyboardMarkup(row_width=2)
    user_id = message.from_user.id
    cleanup(user_id)
    if path is None:
        drives = get_available_drives()
        buttons = []
        for i, d in enumerate(drives):
            token = f"drv_{int(time.time())}_{i}"
            add_token(user_id, token, d)
            buttons.append(InlineKeyboardButton(f"üíø {d}", callback_data=f"fb_nav_{token}"))
        keyboard.add(*buttons)
        text = "üóÇÔ∏è –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫:"
    else:
        contents = get_directory_contents(path)
        if contents is None:
            await message.answer("‚õîÔ∏è –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        text = f"<code>{path}</code>"
        buttons = []
        parent_dir = os.path.dirname(path)
        if parent_dir != path:
             token = f"up_{int(time.time())}"
             add_token(user_id, token, parent_dir)
             buttons.append(InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ", callback_data=f"fb_up_{token}"))
        else:
            buttons.append(InlineKeyboardButton("‚¨ÜÔ∏è –ö —Å–ø–∏—Å–∫—É –¥–∏—Å–∫–æ–≤", callback_data="fb_nav_drives"))

        for i, d in enumerate(contents['dirs']):
            token = f"dir_{int(time.time())}_{i}"
            add_token(user_id, token, os.path.join(path, d))
            buttons.append(InlineKeyboardButton(f"üìÅ {d}", callback_data=f"fb_nav_{token}"))
        for f in contents['files']:
            buttons.append(InlineKeyboardButton(f"üìÑ {f}", callback_data="noop"))
        
        keyboard.add(*buttons)

    keyboard.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="fb_close"))

    try:
        await bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


async def show_process_list(message: types.Message, page=0):
    processes = get_process_list()
    total_pages = math.ceil(len(processes) / PROCESS_LIST_PAGE_SIZE)
    start_index = page * PROCESS_LIST_PAGE_SIZE
    end_index = start_index + PROCESS_LIST_PAGE_SIZE
    processes_to_show = processes[start_index:end_index]

    keyboard = InlineKeyboardMarkup(row_width=1)
    for proc in processes_to_show:
        text = f"‚ùå {proc['name']} ({proc['pid']}) - {proc['memory_mb']:.2f} MB"
        keyboard.add(InlineKeyboardButton(text, callback_data=f"kill_{proc['pid']}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"tm_page_{page-1}")
        )
    nav_buttons.append(
        InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop")
    )
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"tm_page_{page+1}")
        )
    keyboard.row(*nav_buttons)
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="tm_page_0"))
    # allow exiting to main menu at any time from process list
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tm_home"))

    try:
        await bot.edit_message_text(
            "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–∞–º—è—Ç–∏):",
            message.chat.id,
            message.message_id,
            reply_markup=keyboard,
        )
    except Exception:
        await message.answer(
            "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø–∞–º—è—Ç–∏):", reply_markup=keyboard
        )


async def show_installed_apps(message: types.Message, page=0):
    await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    apps = get_installed_apps()
    total_pages = math.ceil(len(apps) / APPS_PAGE_SIZE)
    start_index = page * APPS_PAGE_SIZE
    end_index = start_index + APPS_PAGE_SIZE
    apps_to_show = apps[start_index:end_index]

    response_text = "<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n\n"
    for i, app in enumerate(apps_to_show, start=start_index + 1):
        response_text += f"{i}. <code>{app['name']}</code> (–í–µ—Ä—Å–∏—è: {app['version']})\n"

    keyboard = InlineKeyboardMarkup()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"app_page_{page-1}")
        )
    nav_buttons.append(
        InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop")
    )
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"app_page_{page+1}")
        )
    keyboard.row(*nav_buttons)

    try:
        await bot.edit_message_text(
            response_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    except Exception:
        await message.answer(response_text, reply_markup=keyboard, parse_mode="HTML")


async def handle_wallpaper_photo(message: types.Message):
    from commands.wallpaper_changer import FILES_BUTTONS
    await message.answer(
        "‚è≥ –°–∫–∞—á–∏–≤–∞—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±–æ–∏...",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=FILES_BUTTONS, resize_keyboard=True)
    )
    wallpaper_dir = os.path.join(os.path.dirname(__file__), "wallpapers")
    if not os.path.exists(wallpaper_dir):
        os.makedirs(wallpaper_dir)

    photo_id = message.photo[-1].file_id
    file = await bot.get_file(photo_id)
    destination_path = os.path.join(wallpaper_dir, f"{photo_id}.jpg")
    await bot.download_file(file.file_path, destination_path)

    success, result_message = set_wallpaper(destination_path)
    await message.answer(
        result_message,
        reply_markup=types.ReplyKeyboardMarkup(keyboard=FILES_BUTTONS, resize_keyboard=True)
    )
    # clear per-user awaiting flag
    ud = get_user_data_for(message.from_user.id)
    ud.pop("awaiting_wallpaper", None)


async def send_performance_graphs(message: types.Message):
    await message.answer("‚è≥ –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    graph_paths = generate_performance_graphs()
    if not graph_paths:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.")
        return

    for path in graph_paths:
        try:
            with open(path, "rb") as photo:
                await bot.send_photo(message.chat.id, photo)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞ {os.path.basename(path)}: {e}")
        finally:
            if os.path.exists(path):
                os.remove(path)

    # after sending all graphs, show main menu keyboard so user can continue
    try:
        keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
        await message.answer("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=keyboard)
    except Exception:
        await message.answer("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@dp.callback_query_handler(lambda c: c.data.startswith("fb_"))
async def file_browser_callback(callback_query: types.CallbackQuery):
    # callback format: fb_<action>_<token>
    action_data = callback_query.data.split("_", 2)
    action = action_data[1]
    token = action_data[2] if len(action_data) > 2 else None
    user_id = callback_query.from_user.id

    # cleanup stale tokens and resolve token to path using per-user map (if applicable)
    cleanup(user_id)
    resolved = None
    if token:
        resolved = resolve_token(user_id, token)

    if action == "nav":
        if token == 'drives' or (token == 'drives'):
            await show_file_browser(callback_query.message, path=None)
        else:
            await show_file_browser(callback_query.message, path=resolved)
    elif action == "up":
        if resolved is None:
            await show_file_browser(callback_query.message, path=None)
        else:
            parent_path = os.path.dirname(resolved)
            if parent_path == resolved:
                await show_file_browser(callback_query.message, path=None)
            else:
                await show_file_browser(callback_query.message, path=parent_path)
    elif action == "close":
        # cleanup token map for this user
        clear_user(user_id)
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("tm_page_"))
async def process_list_page_callback(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    await show_process_list(callback_query.message, page)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("kill_"))
async def kill_process_callback(callback_query: types.CallbackQuery):
    pid = int(callback_query.data.split("_")[-1])
    result = kill_process_by_pid(pid)
    await callback_query.answer(result, show_alert=True)
    await show_process_list(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == "tm_home")
async def tm_home_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # clear per-user state for this user and show main menu
    try:
        ud = get_user_data_for(user_id)
        ud.clear()
    except Exception:
        pass
    keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
    try:
        # remove the inline message and send main menu keyboard
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    except Exception:
        pass
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("set_theme_"))
async def set_theme_callback(callback_query: types.CallbackQuery):
    mode = callback_query.data.split("_")[-1]
    success, message = set_theme(mode)
    await callback_query.answer(message, show_alert=True)
    await bot.edit_message_text(
        f"{callback_query.message.text}\n\n{message}",
        callback_query.from_user.id,
        callback_query.message.message_id,
    )


# power modes removed


@dp.callback_query_handler(lambda c: c.data.startswith("app_page_"))
async def app_list_page_callback(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    await show_installed_apps(callback_query.message, page)
    await callback_query.answer()


# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message_handler(commands=["start", "—Å—Ç–∞—Ä—Ç"])
async def start(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        return await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    state = get_user_auth_state(message.from_user.id)
    if state["authenticated"]:
        keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
        await message.answer("‚úÖ –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=keyboard)
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=["logout", "–≤—ã–π—Ç–∏"])
async def logout(message: types.Message):
    state = get_user_auth_state(message.from_user.id)
    state["authenticated"] = False
    # clear only this user's data (don't wipe global mapping for all users)
    ud = get_user_data_for(message.from_user.id)
    ud.clear()
    await message.answer("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=types.ReplyKeyboardRemove())


async def handle_commands(message: types.Message):
    # use per-user state dictionary
    user_id = message.from_user.id
    user_data = get_user_data_for(user_id)
    text = message.text

    # --- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π stateful —Ä–µ–∂–∏–º ---
    if user_data.get('quick_access_mode'):
        from commands.quick_access import handle_quick_access_choice
        result = await handle_quick_access_choice(message)
        if result == 'CANCELLED':
            # –°–±—Ä–æ—Å –≤—Å–µ—Ö stateful-—Ñ–ª–∞–≥–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
            for key in list(user_data.keys()):
                if key.endswith('_mode') or key.startswith('set_') or key in ('create_file','create_folder','open_program','open_folder','open_site','show_message','desktop_files_mode','window_action','youtube_mode'):
                    user_data.pop(key, None)
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        return

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å–ø—Ä–∞–≤–∫–∞ ---
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_data.clear()
        keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_data.clear()
        keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        return
    elif text == "‚û°Ô∏è –î–∞–ª—å—à–µ":
        keyboard = ReplyKeyboardMarkup(keyboard=EXTRA_COMMAND_BUTTONS, resize_keyboard=True)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=keyboard)
        return
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        help_text = (
            "<b>‚ÑπÔ∏è –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:</b>\n\n"
            "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n"
            "- ‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å).\n"
            "- üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å).\n"
            "- üìÇ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.\n"
            "- üìÑ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.\n"
            "- üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∏–º–µ–Ω–∏.\n"
            "- ‚ñ∂Ô∏è YouTube –≤–∏–¥–µ–æ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YouTube-–≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ.\n"
            "- üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.\n"
            "- üìã –§–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.\n"
            "- üîä –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å ‚Äî –∑–∞–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-100).\n"
            "- üåû –ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å ‚Äî –∑–∞–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0-100).\n"
            "- ‚≠ê –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏.\n"
            "- ‚û°Ô∏è –î–∞–ª—å—à–µ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "- üîí –í—ã–π—Ç–∏ ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
            "- ‚ùì –ü–æ–º–æ—â—å ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.\n\n"
            "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "- üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–ö.\n"
            "- üóî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏ Windows.\n"
            "- ‚öôÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ PID.\n"
            "- üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏ ‚Äî —Å–º–µ–Ω–∞ –æ–±–æ–µ–≤ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞.\n"
            "- üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É ‚Äî —Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ Windows.\n"
            ""
            "- üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n"
            "- üåê IP –ê–¥—Ä–µ—Å–∞ ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ –≤–Ω–µ—à–Ω–∏–π IP.\n"
            "- üìä –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ CPU/RAM/–¥–∏—Å–∫–∞.\n"
            "- Ô∏è –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏.\n"
            "- üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n"
            "- üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø–æ –ø—É—Ç–∏.\n"
            "- üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "- üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é.\n"
            "- ‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ü–ö ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ.\n"
            "- üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é ‚Äî —ç–º—É–ª—è—Ü–∏—è –º—ã—à–∏.\n"
            "- üíª –¢–µ—Ä–º–∏–Ω–∞–ª ‚Äî —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å).\n"
            "- ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
            "<b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>\n"
            "- 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n"
            "- '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' ‚Äî —à–∞–≥ –Ω–∞–∑–∞–¥ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n"
            "- –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.\n\n"
            "<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
            "- –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.\n"
            "- –ü–æ—Å–ª–µ 3 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.\n"
            "- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        )
        await message.answer(help_text, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
        return

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    if text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö":
        user_data['lock_pc'] = True
        await call_handler(lock_pc, message, user_data)
        return
    elif text == "üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞":
        await screenshot(message)
        return
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ü–ö":
        await system_info_full(message)
        return
    elif text == "üîí –í—ã–π—Ç–∏":
        await logout(message)
        return
    if text == "üìÇ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É":
        user_data['create_folder'] = True
        await call_handler(create_folder, message, user_data)
        return
    elif text == "üìÑ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª":
        user_data['create_file'] = True
        await call_handler(create_file, message, user_data)
        return
    elif text == "üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É":
        user_data['open_program'] = True
        await call_handler(open_program, message, user_data)
        return
    elif text == "üìã –§–∞–π–ª—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ":
        await call_handler(files_on_desktop, message, user_data)
        try:
            await message.answer(f"[DBG_AFTER files_on_desktop] keys: {list(user_data.keys())}")
        except Exception:
            pass
        return
    elif text == "üîä –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å":
        user_data['set_volume'] = True
        await call_handler(set_volume, message, user_data)
        return
    elif text == "üåû –ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å":
        user_data['set_brightness'] = True
        await call_handler(set_brightness, message, user_data)
        return
    elif text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω":
        user_data['show_message'] = True
        await call_handler(show_message, message, user_data)
        return
    elif text == "üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç":
        user_data['open_site'] = True
        await call_handler(open_site, message, user_data)
        return
    elif text == "üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É":
        user_data['open_folder'] = True
        await call_handler(open_folder, message, user_data)
        return
    elif text == "üñºÔ∏è –°–º–µ–Ω–∏—Ç—å –æ–±–æ–∏":
        user_data["awaiting_wallpaper"] = True
        from commands.wallpaper_changer import wallpaper_request_message
        await call_handler(wallpaper_request_message, message, user_data)
        return
    elif text == "‚≠ê –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø":
        user_data['quick_access_mode'] = True
        await call_handler(quick_access_initial, message, user_data)
        return
    elif text == "‚ñ∂Ô∏è YouTube –≤–∏–¥–µ–æ":
        await call_handler(youtube, message, user_data)
        return
    elif text == "üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É":
        keyboard = InlineKeyboardMarkup().row(
            InlineKeyboardButton("üí° –°–≤–µ—Ç–ª–∞—è", callback_data="set_theme_light"),
            InlineKeyboardButton("üåô –¢–µ–º–Ω–∞—è", callback_data="set_theme_dark")
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        return
    elif text == "üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        await call_handler(show_installed_apps, message, user_data)
        return
    elif text == "üåê IP –ê–¥—Ä–µ—Å–∞":
        await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é IP –∞–¥—Ä–µ—Å–∞...")
        private_ip = get_private_ip()
        public_ip = get_public_ip()
        response_text = (
            f"<b>IP –ê–¥—Ä–µ—Å–∞:</b>\n\n"
            f"üè† <b>–õ–æ–∫–∞–ª—å–Ω—ã–π (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π):</b>\n<code>{private_ip}</code>\n\n"
            f"üåç <b>–ü—É–±–ª–∏—á–Ω—ã–π (–≤–Ω–µ—à–Ω–∏–π):</b>\n<code>{public_ip}</code>"
        )
        await message.answer(response_text, parse_mode="HTML")
        return
    elif text == "üíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await system_info(message)
        return
    elif text == "üóî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–∞–º–∏":
        user_data['window_action'] = True
        await call_handler(window_manage, message, user_data)
        return
    elif text == "üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é":
        user_data['mouse_control_mode'] = True
        await call_handler(mouse_control, message, user_data)
        return


    # --- –ö–æ–º–∞–Ω–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–∞—Ä–æ–ª—è ---
    if text == "‚èª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö":
        user_data["awaiting_password_for"] = "shutdown"
        await message.answer("üîí –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        return
    elif text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö":
        user_data["awaiting_password_for"] = "reboot"
        await message.answer("üîí –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        return
    elif text == "‚öôÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á":
        user_data["awaiting_password_for"] = "task_manager"
        await message.answer("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∑–∞–¥–∞—á, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        return
    # '–†–µ–∂–∏–º—ã –ø–∏—Ç–∞–Ω–∏—è' —É–¥–∞–ª–µ–Ω—ã
    elif text == "üìä –ì—Ä–∞—Ñ–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏":
        user_data["awaiting_password_for"] = "performance_graphs"
        await message.answer("üîí –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        return
    elif text == "üóÇÔ∏è –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä":
        user_data["awaiting_password_for"] = "file_browser"
        await message.answer("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        return



    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
    if user_data.get("awaiting_password_for"):
        command = user_data.pop("awaiting_password_for")
        password_attempt = message.text.encode("utf-8")
        await message.delete()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ –≤—Å–µ–º —Ö—ç—à–∞–º
        for hash_bytes in BOT_PASSWORD_HASHES:
            try:
                if bcrypt.checkpw(password_attempt, hash_bytes):
                    await message.answer(f"‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã–ø–æ–ª–Ω—è—é: {command}")
                    if command == "shutdown": await shutdown(message)
                    elif command == "reboot": await reboot(message)

                    elif command == "task_manager": await show_process_list(message)
                    elif command == "power_modes":
                        keyboard = InlineKeyboardMarkup().row(
                            InlineKeyboardButton(" –°–æ–Ω", callback_data="power_sleep"),
                            InlineKeyboardButton(" hib –ì–∏–±–µ—Ä–Ω–∞—Ü–∏—è", callback_data="power_hibernate"),
                        )
                        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è:", reply_markup=keyboard)
                    elif command == "performance_graphs": await send_performance_graphs(message)
                    elif command == "file_browser": await show_file_browser(message)
                    break
            except Exception as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ bcrypt.checkpw: {e}")
        else:
            await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # --- Stateful —Ä–µ–∂–∏–º—ã (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ) ---
    stateful_commands = {
        'create_folder': create_folder_name,
        'create_file': create_file_name,
        'set_volume': set_volume_value,
        'set_brightness': set_brightness_value,
        'show_message': show_message_text,
        'open_site': open_site_link,
        'open_folder': open_folder_path,
        'open_program': open_program_name,
        'mouse_control_mode': mouse_action,
        'window_action': window_action,
        'desktop_files_mode': files_on_desktop_action,
        'youtube_mode': youtube_link
    }

    for state, handler in stateful_commands.items():
        if user_data.get(state):
            result = await call_handler(handler, message, user_data)
            if result == 'CANCELLED':
                user_data.pop(state, None)
                await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True))
            return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    # Debug: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ü–∏—Ñ—Ä—É, –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—É—â–µ–µ per-user —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    try:
        if text and text.strip().isdigit():
            await message.answer(f"[DEBUG] user_data keys: {list(user_data.keys())}\ndesktop_files_mode={user_data.get('desktop_files_mode')}\ndesktop_files_list_len={len(user_data.get('desktop_files_list', []))}")
    except Exception:
        pass
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def handle_password_attempt(message: types.Message):
    user_id = message.from_user.id
    state = get_user_auth_state(user_id)

    if time.time() < state["lockout_until"]:
        await message.delete()
        await message.answer(
            f"üîí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {int((state['lockout_until'] - time.time()) / 60)} –º–∏–Ω—É—Ç."
        )
        return

    password_attempt = message.text.encode("utf-8")
    await message.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ –≤—Å–µ–º —Ö—ç—à–∞–º
    for hash_bytes in BOT_PASSWORD_HASHES:
        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è: {password_attempt} –ø—Ä–æ—Ç–∏–≤ —Ö—ç—à–∞: {hash_bytes}")
        try:
            result = bcrypt.checkpw(password_attempt, hash_bytes)
            print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt.checkpw: {result}")
        except Exception as e:
            print(f"[DEBUG] –û—à–∏–±–∫–∞ bcrypt.checkpw: {e}")
            result = False
        if result:
            state["authenticated"] = True
            state["failed_attempts"] = 0
            keyboard = ReplyKeyboardMarkup(keyboard=MAIN_COMMAND_BUTTONS, resize_keyboard=True)
            await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.", reply_markup=keyboard)
            break
    else:
        state["failed_attempts"] += 1
        if state["failed_attempts"] >= MAX_LOGIN_ATTEMPTS:
            state["lockout_until"] = time.time() + LOCKOUT_DURATION
            await message.answer(
                f"‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {int(LOCKOUT_DURATION / 60)} –º–∏–Ω—É—Ç."
            )
        else:
            await message.answer("‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def main_message_handler(message: types.Message):
    if message.from_user.id != AUTHORIZED_USER_ID:
        return await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    state = get_user_auth_state(message.from_user.id)
    if state["authenticated"]:
        # per-user data for this chat
        ud = get_user_data_for(message.from_user.id)
        if message.content_type == "photo":
            if ud.get("awaiting_wallpaper"):
                await handle_wallpaper_photo(message)
            else:
                await message.answer(
                    "üñºÔ∏è –Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –æ–±–æ–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É."
                )
        else:
            await handle_commands(message)
    else:
        if message.content_type == "text":
            await handle_password_attempt(message)
        else:
            await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def on_startup(dp):
    if not all([TOKEN, AUTHORIZED_USER_ID, BOT_PASSWORD_HASHES]):
        print("CRITICAL ERROR: Missing environment variables")
        return
    try:
        await bot.send_message(
            chat_id=AUTHORIZED_USER_ID, text="<b>‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.</b>", parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)